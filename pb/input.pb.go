// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pb/input.proto

package pb

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HelloInput_Enum int32

const (
	HelloInput_E_0 HelloInput_Enum = 0
	HelloInput_E_1 HelloInput_Enum = 1
)

var HelloInput_Enum_name = map[int32]string{
	0: "E_0",
	1: "E_1",
}

var HelloInput_Enum_value = map[string]int32{
	"E_0": 0,
	"E_1": 1,
}

func (x HelloInput_Enum) String() string {
	return proto.EnumName(HelloInput_Enum_name, int32(x))
}

func (HelloInput_Enum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_62629f3829a9c5e2, []int{0, 0}
}

type HelloInput struct {
	Double_1         float64            `protobuf:"fixed64,1,opt,name=Double_1,json=Double1,proto3" json:"Double_1,omitempty"`
	Float_1          float32            `protobuf:"fixed32,2,opt,name=Float_1,json=Float1,proto3" json:"Float_1,omitempty"`
	Int32_1          int32              `protobuf:"varint,3,opt,name=Int32_1,json=Int321,proto3" json:"Int32_1,omitempty"`
	Int64_1          int64              `protobuf:"varint,4,opt,name=Int64_1,json=Int641,proto3" json:"Int64_1,omitempty"`
	Uint32_1         uint32             `protobuf:"varint,5,opt,name=Uint32_1,json=Uint321,proto3" json:"Uint32_1,omitempty"`
	Uint64_1         uint64             `protobuf:"varint,6,opt,name=Uint64_1,json=Uint641,proto3" json:"Uint64_1,omitempty"`
	Sint32_1         int32              `protobuf:"zigzag32,7,opt,name=Sint32_1,json=Sint321,proto3" json:"Sint32_1,omitempty"`
	Sint64_1         int64              `protobuf:"zigzag64,8,opt,name=Sint64_1,json=Sint641,proto3" json:"Sint64_1,omitempty"`
	Fixed32_1        uint32             `protobuf:"fixed32,9,opt,name=Fixed32_1,json=Fixed321,proto3" json:"Fixed32_1,omitempty"`
	Fixed64_1        uint64             `protobuf:"fixed64,10,opt,name=Fixed64_1,json=Fixed641,proto3" json:"Fixed64_1,omitempty"`
	Sfixed32_1       int32              `protobuf:"fixed32,11,opt,name=Sfixed32_1,json=Sfixed321,proto3" json:"Sfixed32_1,omitempty"`
	Sfixed64_1       int64              `protobuf:"fixed64,12,opt,name=Sfixed64_1,json=Sfixed641,proto3" json:"Sfixed64_1,omitempty"`
	Bool_1           bool               `protobuf:"varint,13,opt,name=Bool_1,json=Bool1,proto3" json:"Bool_1,omitempty"`
	String_1         string             `protobuf:"bytes,14,opt,name=String_1,json=String1,proto3" json:"String_1,omitempty"`
	Bytes_1          []byte             `protobuf:"bytes,15,opt,name=Bytes_1,json=Bytes1,proto3" json:"Bytes_1,omitempty"`
	Enum_1           HelloInput_Enum    `protobuf:"varint,16,opt,name=Enum_1,json=Enum1,proto3,enum=pb.HelloInput_Enum" json:"Enum_1,omitempty"`
	RepeatedInt32_1  []int32            `protobuf:"varint,17,rep,packed,name=RepeatedInt32_1,json=RepeatedInt321,proto3" json:"RepeatedInt32_1,omitempty"`
	RepeatedString_1 []string           `protobuf:"bytes,18,rep,name=RepeatedString_1,json=RepeatedString1,proto3" json:"RepeatedString_1,omitempty"`
	Nested_1         *HelloInput_Nested `protobuf:"bytes,19,opt,name=Nested_1,json=Nested1,proto3" json:"Nested_1,omitempty"`
	// Types that are valid to be assigned to Oneof_1:
	//	*HelloInput_Int32_3
	//	*HelloInput_String_3
	//	*HelloInput_Nested_2
	Oneof_1           isHelloInput_Oneof_1          `protobuf_oneof:"Oneof_1"`
	MapUint32String_1 map[uint32]string             `protobuf:"bytes,23,rep,name=MapUint32String_1,json=MapUint32String1,proto3" json:"MapUint32String_1,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringNested_1 map[string]*HelloInput_Nested `protobuf:"bytes,24,rep,name=MapStringNested_1,json=MapStringNested1,proto3" json:"MapStringNested_1,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BigPos_1          int32                         `protobuf:"varint,536870911,opt,name=BigPos_1,json=BigPos1,proto3" json:"BigPos_1,omitempty"`
}

func (m *HelloInput) Reset()         { *m = HelloInput{} }
func (m *HelloInput) String() string { return proto.CompactTextString(m) }
func (*HelloInput) ProtoMessage()    {}
func (*HelloInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_62629f3829a9c5e2, []int{0}
}
func (m *HelloInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloInput.Merge(m, src)
}
func (m *HelloInput) XXX_Size() int {
	return m.Size()
}
func (m *HelloInput) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloInput.DiscardUnknown(m)
}

var xxx_messageInfo_HelloInput proto.InternalMessageInfo

type isHelloInput_Oneof_1 interface {
	isHelloInput_Oneof_1()
	MarshalTo([]byte) (int, error)
	Size() int
}

type HelloInput_Int32_3 struct {
	Int32_3 int32 `protobuf:"varint,20,opt,name=Int32_3,json=Int323,proto3,oneof" json:"Int32_3,omitempty"`
}
type HelloInput_String_3 struct {
	String_3 string `protobuf:"bytes,21,opt,name=String_3,json=String3,proto3,oneof" json:"String_3,omitempty"`
}
type HelloInput_Nested_2 struct {
	Nested_2 *HelloInput_Nested `protobuf:"bytes,22,opt,name=Nested_2,json=Nested2,proto3,oneof" json:"Nested_2,omitempty"`
}

func (*HelloInput_Int32_3) isHelloInput_Oneof_1()  {}
func (*HelloInput_String_3) isHelloInput_Oneof_1() {}
func (*HelloInput_Nested_2) isHelloInput_Oneof_1() {}

func (m *HelloInput) GetOneof_1() isHelloInput_Oneof_1 {
	if m != nil {
		return m.Oneof_1
	}
	return nil
}

func (m *HelloInput) GetDouble_1() float64 {
	if m != nil {
		return m.Double_1
	}
	return 0
}

func (m *HelloInput) GetFloat_1() float32 {
	if m != nil {
		return m.Float_1
	}
	return 0
}

func (m *HelloInput) GetInt32_1() int32 {
	if m != nil {
		return m.Int32_1
	}
	return 0
}

func (m *HelloInput) GetInt64_1() int64 {
	if m != nil {
		return m.Int64_1
	}
	return 0
}

func (m *HelloInput) GetUint32_1() uint32 {
	if m != nil {
		return m.Uint32_1
	}
	return 0
}

func (m *HelloInput) GetUint64_1() uint64 {
	if m != nil {
		return m.Uint64_1
	}
	return 0
}

func (m *HelloInput) GetSint32_1() int32 {
	if m != nil {
		return m.Sint32_1
	}
	return 0
}

func (m *HelloInput) GetSint64_1() int64 {
	if m != nil {
		return m.Sint64_1
	}
	return 0
}

func (m *HelloInput) GetFixed32_1() uint32 {
	if m != nil {
		return m.Fixed32_1
	}
	return 0
}

func (m *HelloInput) GetFixed64_1() uint64 {
	if m != nil {
		return m.Fixed64_1
	}
	return 0
}

func (m *HelloInput) GetSfixed32_1() int32 {
	if m != nil {
		return m.Sfixed32_1
	}
	return 0
}

func (m *HelloInput) GetSfixed64_1() int64 {
	if m != nil {
		return m.Sfixed64_1
	}
	return 0
}

func (m *HelloInput) GetBool_1() bool {
	if m != nil {
		return m.Bool_1
	}
	return false
}

func (m *HelloInput) GetString_1() string {
	if m != nil {
		return m.String_1
	}
	return ""
}

func (m *HelloInput) GetBytes_1() []byte {
	if m != nil {
		return m.Bytes_1
	}
	return nil
}

func (m *HelloInput) GetEnum_1() HelloInput_Enum {
	if m != nil {
		return m.Enum_1
	}
	return HelloInput_E_0
}

func (m *HelloInput) GetRepeatedInt32_1() []int32 {
	if m != nil {
		return m.RepeatedInt32_1
	}
	return nil
}

func (m *HelloInput) GetRepeatedString_1() []string {
	if m != nil {
		return m.RepeatedString_1
	}
	return nil
}

func (m *HelloInput) GetNested_1() *HelloInput_Nested {
	if m != nil {
		return m.Nested_1
	}
	return nil
}

func (m *HelloInput) GetInt32_3() int32 {
	if x, ok := m.GetOneof_1().(*HelloInput_Int32_3); ok {
		return x.Int32_3
	}
	return 0
}

func (m *HelloInput) GetString_3() string {
	if x, ok := m.GetOneof_1().(*HelloInput_String_3); ok {
		return x.String_3
	}
	return ""
}

func (m *HelloInput) GetNested_2() *HelloInput_Nested {
	if x, ok := m.GetOneof_1().(*HelloInput_Nested_2); ok {
		return x.Nested_2
	}
	return nil
}

func (m *HelloInput) GetMapUint32String_1() map[uint32]string {
	if m != nil {
		return m.MapUint32String_1
	}
	return nil
}

func (m *HelloInput) GetMapStringNested_1() map[string]*HelloInput_Nested {
	if m != nil {
		return m.MapStringNested_1
	}
	return nil
}

func (m *HelloInput) GetBigPos_1() int32 {
	if m != nil {
		return m.BigPos_1
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*HelloInput) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*HelloInput_Int32_3)(nil),
		(*HelloInput_String_3)(nil),
		(*HelloInput_Nested_2)(nil),
	}
}

type HelloInput_Nested struct {
	Int32_2  int32  `protobuf:"varint,1,opt,name=Int32_2,json=Int322,proto3" json:"Int32_2,omitempty"`
	String_2 string `protobuf:"bytes,2,opt,name=String_2,json=String2,proto3" json:"String_2,omitempty"`
}

func (m *HelloInput_Nested) Reset()         { *m = HelloInput_Nested{} }
func (m *HelloInput_Nested) String() string { return proto.CompactTextString(m) }
func (*HelloInput_Nested) ProtoMessage()    {}
func (*HelloInput_Nested) Descriptor() ([]byte, []int) {
	return fileDescriptor_62629f3829a9c5e2, []int{0, 0}
}
func (m *HelloInput_Nested) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloInput_Nested) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloInput_Nested.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloInput_Nested) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloInput_Nested.Merge(m, src)
}
func (m *HelloInput_Nested) XXX_Size() int {
	return m.Size()
}
func (m *HelloInput_Nested) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloInput_Nested.DiscardUnknown(m)
}

var xxx_messageInfo_HelloInput_Nested proto.InternalMessageInfo

func (m *HelloInput_Nested) GetInt32_2() int32 {
	if m != nil {
		return m.Int32_2
	}
	return 0
}

func (m *HelloInput_Nested) GetString_2() string {
	if m != nil {
		return m.String_2
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.HelloInput_Enum", HelloInput_Enum_name, HelloInput_Enum_value)
	proto.RegisterType((*HelloInput)(nil), "pb.HelloInput")
	proto.RegisterMapType((map[string]*HelloInput_Nested)(nil), "pb.HelloInput.MapStringNested1Entry")
	proto.RegisterMapType((map[uint32]string)(nil), "pb.HelloInput.MapUint32String1Entry")
	proto.RegisterType((*HelloInput_Nested)(nil), "pb.HelloInput.Nested")
}

func init() { proto.RegisterFile("pb/input.proto", fileDescriptor_62629f3829a9c5e2) }

var fileDescriptor_62629f3829a9c5e2 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4f, 0x4f, 0xdb, 0x3e,
	0x18, 0xee, 0xdb, 0xd0, 0xa4, 0x31, 0xd0, 0x06, 0x43, 0x7f, 0xf8, 0x07, 0x22, 0xb2, 0xd0, 0xa4,
	0x79, 0x9b, 0xd4, 0xe1, 0x04, 0xa1, 0x69, 0xda, 0xa9, 0x1b, 0x08, 0x0e, 0xfb, 0xe7, 0x6a, 0x97,
	0x5d, 0xa2, 0x56, 0x18, 0x54, 0x2d, 0x4b, 0x22, 0x48, 0xa7, 0xf1, 0x0d, 0x76, 0xdc, 0xc7, 0xda,
	0x91, 0xe3, 0x8e, 0x13, 0x7c, 0x90, 0x4e, 0xb6, 0x93, 0x34, 0x74, 0x63, 0x97, 0xd6, 0xcf, 0xfb,
	0xf8, 0x79, 0xec, 0xd7, 0x7e, 0x1c, 0xd4, 0xc9, 0xc6, 0x4f, 0x27, 0x49, 0x36, 0xcd, 0xfb, 0xd9,
	0x45, 0x9a, 0xa7, 0xb8, 0x99, 0x8d, 0x77, 0xbf, 0xb9, 0x08, 0x1d, 0xcb, 0x38, 0x4e, 0x4f, 0x14,
	0x81, 0xff, 0x47, 0xed, 0x57, 0xe9, 0x74, 0x1c, 0xcb, 0x88, 0x13, 0xa0, 0xc0, 0x40, 0x38, 0x06,
	0x73, 0xbc, 0x89, 0x9c, 0xa3, 0x38, 0x1d, 0xe5, 0x11, 0x27, 0x4d, 0x0a, 0xac, 0x29, 0x6c, 0x0d,
	0x35, 0x71, 0x92, 0xe4, 0x61, 0x10, 0x71, 0x62, 0x51, 0x60, 0x2d, 0x61, 0x6b, 0x58, 0x12, 0x07,
	0xfb, 0x11, 0x27, 0x4b, 0x14, 0x98, 0xa5, 0x89, 0x83, 0x7d, 0xae, 0x56, 0xf9, 0x30, 0x29, 0x24,
	0x2d, 0x0a, 0x6c, 0x55, 0x38, 0x06, 0x57, 0x94, 0x16, 0xd9, 0x14, 0xd8, 0x92, 0xa1, 0x0a, 0xd5,
	0xb0, 0x54, 0x39, 0x14, 0xd8, 0x9a, 0x70, 0x86, 0x73, 0xd5, 0xb0, 0x54, 0xb5, 0x29, 0x30, 0x6c,
	0x28, 0xa5, 0xda, 0x46, 0xee, 0xd1, 0xe4, 0xab, 0x3c, 0xd5, 0x32, 0x97, 0x02, 0x73, 0x44, 0xbb,
	0x28, 0xcc, 0x49, 0x2d, 0x44, 0x14, 0x98, 0x5d, 0x90, 0x4a, 0xb9, 0x83, 0xd0, 0xf0, 0xac, 0x92,
	0x2e, 0x53, 0x60, 0x5d, 0xe1, 0x96, 0x95, 0x1a, 0xad, 0xc5, 0x2b, 0x14, 0x98, 0x57, 0xd2, 0x4a,
	0xdd, 0x43, 0xf6, 0x20, 0x4d, 0xe3, 0x88, 0x93, 0x55, 0x0a, 0xac, 0x2d, 0x5a, 0x0a, 0x99, 0x9d,
	0xe6, 0x17, 0x93, 0xe4, 0x3c, 0xe2, 0xa4, 0x43, 0x81, 0xb9, 0xc2, 0x31, 0x58, 0x1f, 0xd7, 0xe0,
	0x2a, 0x97, 0x97, 0x11, 0x27, 0x5d, 0x0a, 0x6c, 0x45, 0xd8, 0x1a, 0x72, 0xfc, 0x18, 0xd9, 0x87,
	0xc9, 0xf4, 0x73, 0xc4, 0x89, 0x47, 0x81, 0x75, 0x82, 0xf5, 0x7e, 0x36, 0xee, 0xcf, 0x2f, 0xad,
	0xaf, 0x48, 0xd1, 0x52, 0xbf, 0x1c, 0x3f, 0x44, 0x5d, 0x21, 0x33, 0x39, 0xca, 0xe5, 0x69, 0x79,
	0x29, 0x6b, 0xd4, 0x62, 0x2d, 0xd1, 0xb9, 0x53, 0xe6, 0xf8, 0x11, 0xf2, 0xca, 0x4a, 0xb5, 0x21,
	0x4c, 0x2d, 0xe6, 0x8a, 0xee, 0xdd, 0x3a, 0xc7, 0x7b, 0xa8, 0xfd, 0x46, 0x5e, 0xe6, 0xf2, 0x34,
	0xe2, 0x64, 0x9d, 0x02, 0x5b, 0x0e, 0x7a, 0x0b, 0x3b, 0x30, 0xb4, 0x70, 0xcc, 0xbf, 0xea, 0xb2,
	0x88, 0x44, 0x48, 0x36, 0x54, 0x24, 0x8e, 0x1b, 0x45, 0x28, 0x42, 0xbc, 0x5d, 0x1d, 0x40, 0x48,
	0x7a, 0xea, 0x00, 0x8e, 0x1b, 0xe5, 0x11, 0x84, 0x38, 0xa8, 0x56, 0x0a, 0xc8, 0x7f, 0xff, 0x58,
	0x49, 0x69, 0xcc, 0x28, 0xc0, 0xef, 0xd1, 0xda, 0xeb, 0x51, 0x66, 0xf2, 0x53, 0x75, 0xb2, 0x49,
	0x2d, 0xb6, 0x1c, 0x3c, 0x58, 0x10, 0x2f, 0xcc, 0xe3, 0x87, 0x49, 0x7e, 0x71, 0x25, 0xbc, 0xc5,
	0x72, 0x61, 0x69, 0x50, 0xd5, 0x39, 0xb9, 0xcf, 0xb2, 0x3e, 0xaf, 0x66, 0x79, 0xa7, 0x8c, 0x77,
	0x50, 0x7b, 0x30, 0x39, 0x7f, 0x97, 0xaa, 0xdb, 0x9d, 0xcd, 0x66, 0x33, 0xd0, 0x2f, 0xc5, 0x31,
	0x35, 0xbe, 0xf5, 0x02, 0xd9, 0x66, 0xe6, 0xfc, 0x35, 0x05, 0x04, 0x6a, 0xaf, 0x29, 0xa8, 0x25,
	0x27, 0xd0, 0x0f, 0xb0, 0x4a, 0x4e, 0xb0, 0xf5, 0x12, 0xf5, 0xfe, 0xda, 0x1a, 0xf6, 0x90, 0xf5,
	0x49, 0x5e, 0x69, 0xa3, 0x55, 0xa1, 0x86, 0x78, 0x03, 0xb5, 0xbe, 0x8c, 0xe2, 0xa9, 0x2c, 0x2c,
	0x0c, 0x78, 0xde, 0x7c, 0x06, 0x5b, 0x1f, 0xb5, 0xc9, 0x9f, 0xcd, 0xd4, 0x4d, 0x5c, 0x63, 0xf2,
	0xa4, 0x6e, 0x72, 0x6f, 0x1a, 0xe6, 0xde, 0xbb, 0x04, 0x2d, 0xa9, 0x78, 0x62, 0x07, 0x59, 0x87,
	0xd1, 0x9e, 0xd7, 0x30, 0x03, 0xee, 0xc1, 0xc0, 0x45, 0xce, 0xdb, 0x44, 0xa6, 0x67, 0x11, 0x1f,
	0x90, 0x1f, 0x37, 0x3e, 0x5c, 0xdf, 0xf8, 0xf0, 0xeb, 0xc6, 0x87, 0xef, 0xb7, 0x7e, 0xe3, 0xfa,
	0xd6, 0x6f, 0xfc, 0xbc, 0xf5, 0x1b, 0x63, 0x5b, 0x7f, 0xaf, 0xc2, 0xdf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x60, 0x05, 0x47, 0x1c, 0xc1, 0x04, 0x00, 0x00,
}

func (m *HelloInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BigPos_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.BigPos_1))
		i--
		dAtA[i] = 0xf
		i--
		dAtA[i] = 0xff
		i--
		dAtA[i] = 0xff
		i--
		dAtA[i] = 0xff
		i--
		dAtA[i] = 0xf8
	}
	if len(m.MapStringNested_1) > 0 {
		for k := range m.MapStringNested_1 {
			v := m.MapStringNested_1[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintInput(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintInput(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintInput(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
	}
	if len(m.MapUint32String_1) > 0 {
		for k := range m.MapUint32String_1 {
			v := m.MapUint32String_1[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintInput(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i = encodeVarintInput(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintInput(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.Oneof_1 != nil {
		{
			size := m.Oneof_1.Size()
			i -= size
			if _, err := m.Oneof_1.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Nested_1 != nil {
		{
			size, err := m.Nested_1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInput(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.RepeatedString_1) > 0 {
		for iNdEx := len(m.RepeatedString_1) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RepeatedString_1[iNdEx])
			copy(dAtA[i:], m.RepeatedString_1[iNdEx])
			i = encodeVarintInput(dAtA, i, uint64(len(m.RepeatedString_1[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.RepeatedInt32_1) > 0 {
		dAtA4 := make([]byte, len(m.RepeatedInt32_1)*10)
		var j3 int
		for _, num1 := range m.RepeatedInt32_1 {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintInput(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Enum_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Enum_1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Bytes_1) > 0 {
		i -= len(m.Bytes_1)
		copy(dAtA[i:], m.Bytes_1)
		i = encodeVarintInput(dAtA, i, uint64(len(m.Bytes_1)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.String_1) > 0 {
		i -= len(m.String_1)
		copy(dAtA[i:], m.String_1)
		i = encodeVarintInput(dAtA, i, uint64(len(m.String_1)))
		i--
		dAtA[i] = 0x72
	}
	if m.Bool_1 {
		i--
		if m.Bool_1 {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.Sfixed64_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Sfixed64_1))
		i--
		dAtA[i] = 0x61
	}
	if m.Sfixed32_1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Sfixed32_1))
		i--
		dAtA[i] = 0x5d
	}
	if m.Fixed64_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.Fixed64_1))
		i--
		dAtA[i] = 0x51
	}
	if m.Fixed32_1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(m.Fixed32_1))
		i--
		dAtA[i] = 0x4d
	}
	if m.Sint64_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64((uint64(m.Sint64_1)<<1)^uint64((m.Sint64_1>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.Sint32_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64((uint32(m.Sint32_1)<<1)^uint32((m.Sint32_1>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.Uint64_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Uint64_1))
		i--
		dAtA[i] = 0x30
	}
	if m.Uint32_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Uint32_1))
		i--
		dAtA[i] = 0x28
	}
	if m.Int64_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Int64_1))
		i--
		dAtA[i] = 0x20
	}
	if m.Int32_1 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Int32_1))
		i--
		dAtA[i] = 0x18
	}
	if m.Float_1 != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Float_1))))
		i--
		dAtA[i] = 0x15
	}
	if m.Double_1 != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Double_1))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *HelloInput_Int32_3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloInput_Int32_3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintInput(dAtA, i, uint64(m.Int32_3))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xa0
	return len(dAtA) - i, nil
}
func (m *HelloInput_String_3) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloInput_String_3) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i -= len(m.String_3)
	copy(dAtA[i:], m.String_3)
	i = encodeVarintInput(dAtA, i, uint64(len(m.String_3)))
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	return len(dAtA) - i, nil
}
func (m *HelloInput_Nested_2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloInput_Nested_2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Nested_2 != nil {
		{
			size, err := m.Nested_2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintInput(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	return len(dAtA) - i, nil
}
func (m *HelloInput_Nested) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloInput_Nested) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloInput_Nested) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.String_2) > 0 {
		i -= len(m.String_2)
		copy(dAtA[i:], m.String_2)
		i = encodeVarintInput(dAtA, i, uint64(len(m.String_2)))
		i--
		dAtA[i] = 0x12
	}
	if m.Int32_2 != 0 {
		i = encodeVarintInput(dAtA, i, uint64(m.Int32_2))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintInput(dAtA []byte, offset int, v uint64) int {
	offset -= sovInput(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Double_1 != 0 {
		n += 9
	}
	if m.Float_1 != 0 {
		n += 5
	}
	if m.Int32_1 != 0 {
		n += 1 + sovInput(uint64(m.Int32_1))
	}
	if m.Int64_1 != 0 {
		n += 1 + sovInput(uint64(m.Int64_1))
	}
	if m.Uint32_1 != 0 {
		n += 1 + sovInput(uint64(m.Uint32_1))
	}
	if m.Uint64_1 != 0 {
		n += 1 + sovInput(uint64(m.Uint64_1))
	}
	if m.Sint32_1 != 0 {
		n += 1 + sozInput(uint64(m.Sint32_1))
	}
	if m.Sint64_1 != 0 {
		n += 1 + sozInput(uint64(m.Sint64_1))
	}
	if m.Fixed32_1 != 0 {
		n += 5
	}
	if m.Fixed64_1 != 0 {
		n += 9
	}
	if m.Sfixed32_1 != 0 {
		n += 5
	}
	if m.Sfixed64_1 != 0 {
		n += 9
	}
	if m.Bool_1 {
		n += 2
	}
	l = len(m.String_1)
	if l > 0 {
		n += 1 + l + sovInput(uint64(l))
	}
	l = len(m.Bytes_1)
	if l > 0 {
		n += 1 + l + sovInput(uint64(l))
	}
	if m.Enum_1 != 0 {
		n += 2 + sovInput(uint64(m.Enum_1))
	}
	if len(m.RepeatedInt32_1) > 0 {
		l = 0
		for _, e := range m.RepeatedInt32_1 {
			l += sovInput(uint64(e))
		}
		n += 2 + sovInput(uint64(l)) + l
	}
	if len(m.RepeatedString_1) > 0 {
		for _, s := range m.RepeatedString_1 {
			l = len(s)
			n += 2 + l + sovInput(uint64(l))
		}
	}
	if m.Nested_1 != nil {
		l = m.Nested_1.Size()
		n += 2 + l + sovInput(uint64(l))
	}
	if m.Oneof_1 != nil {
		n += m.Oneof_1.Size()
	}
	if len(m.MapUint32String_1) > 0 {
		for k, v := range m.MapUint32String_1 {
			_ = k
			_ = v
			mapEntrySize := 1 + sovInput(uint64(k)) + 1 + len(v) + sovInput(uint64(len(v)))
			n += mapEntrySize + 2 + sovInput(uint64(mapEntrySize))
		}
	}
	if len(m.MapStringNested_1) > 0 {
		for k, v := range m.MapStringNested_1 {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovInput(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovInput(uint64(len(k))) + l
			n += mapEntrySize + 2 + sovInput(uint64(mapEntrySize))
		}
	}
	if m.BigPos_1 != 0 {
		n += 5 + sovInput(uint64(m.BigPos_1))
	}
	return n
}

func (m *HelloInput_Int32_3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 2 + sovInput(uint64(m.Int32_3))
	return n
}
func (m *HelloInput_String_3) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.String_3)
	n += 2 + l + sovInput(uint64(l))
	return n
}
func (m *HelloInput_Nested_2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nested_2 != nil {
		l = m.Nested_2.Size()
		n += 2 + l + sovInput(uint64(l))
	}
	return n
}
func (m *HelloInput_Nested) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Int32_2 != 0 {
		n += 1 + sovInput(uint64(m.Int32_2))
	}
	l = len(m.String_2)
	if l > 0 {
		n += 1 + l + sovInput(uint64(l))
	}
	return n
}

func sovInput(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozInput(x uint64) (n int) {
	return sovInput(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInput
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Double_1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Double_1 = float64(math.Float64frombits(v))
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Float_1", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Float_1 = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32_1", wireType)
			}
			m.Int32_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int64_1", wireType)
			}
			m.Int64_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int64_1 |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint32_1", wireType)
			}
			m.Uint32_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint32_1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uint64_1", wireType)
			}
			m.Uint64_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uint64_1 |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint32_1", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.Sint32_1 = v
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sint64_1", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Sint64_1 = int64(v)
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed32_1", wireType)
			}
			m.Fixed32_1 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed32_1 = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fixed64_1", wireType)
			}
			m.Fixed64_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Fixed64_1 = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed32_1", wireType)
			}
			m.Sfixed32_1 = 0
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed32_1 = int32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sfixed64_1", wireType)
			}
			m.Sfixed64_1 = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.Sfixed64_1 = int64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bool_1", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Bool_1 = bool(v != 0)
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bytes_1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bytes_1 = append(m.Bytes_1[:0], dAtA[iNdEx:postIndex]...)
			if m.Bytes_1 == nil {
				m.Bytes_1 = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enum_1", wireType)
			}
			m.Enum_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Enum_1 |= HelloInput_Enum(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInput
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RepeatedInt32_1 = append(m.RepeatedInt32_1, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInput
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthInput
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthInput
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RepeatedInt32_1) == 0 {
					m.RepeatedInt32_1 = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInput
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RepeatedInt32_1 = append(m.RepeatedInt32_1, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedInt32_1", wireType)
			}
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RepeatedString_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RepeatedString_1 = append(m.RepeatedString_1, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Nested_1 == nil {
				m.Nested_1 = &HelloInput_Nested{}
			}
			if err := m.Nested_1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32_3", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Oneof_1 = &HelloInput_Int32_3{v}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oneof_1 = &HelloInput_String_3{string(dAtA[iNdEx:postIndex])}
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nested_2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &HelloInput_Nested{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Oneof_1 = &HelloInput_Nested_2{v}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapUint32String_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapUint32String_1 == nil {
				m.MapUint32String_1 = make(map[uint32]string)
			}
			var mapkey uint32
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInput
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInput
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInput
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthInput
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthInput
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInput(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInput
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapUint32String_1[mapkey] = mapvalue
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapStringNested_1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MapStringNested_1 == nil {
				m.MapStringNested_1 = make(map[string]*HelloInput_Nested)
			}
			var mapkey string
			var mapvalue *HelloInput_Nested
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowInput
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInput
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthInput
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthInput
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowInput
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthInput
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthInput
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &HelloInput_Nested{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipInput(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthInput
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.MapStringNested_1[mapkey] = mapvalue
			iNdEx = postIndex
		case 536870911:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BigPos_1", wireType)
			}
			m.BigPos_1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BigPos_1 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipInput(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInput
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInput
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloInput_Nested) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowInput
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Nested: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Nested: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Int32_2", wireType)
			}
			m.Int32_2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Int32_2 |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field String_2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowInput
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthInput
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthInput
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.String_2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipInput(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthInput
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthInput
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipInput(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowInput
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInput
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowInput
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthInput
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupInput
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthInput
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthInput        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowInput          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupInput = fmt.Errorf("proto: unexpected end of group")
)
